library(quantmod)
library(xts)
library(timeDate)
library(MASS)
## specify the path for the Data
dir_RM_db = "W:/Data/RM"
dir_code = "W:/Rcode/Utils"
## specify the output directory for figures
dir_figures = paste(dir_RM_db, "figures", sep="/")
## set the working directory and load dependent scripts
setwd(dir_code)
source('VaR_unit.R')
source('ES_unit.R')
## set the working directory
setwd(dir_RM_db)
## get the name of the file
filename = dir()
## load the GTAT data
load("GTAT.RData")
price = GTAT[,'GTAT.Close']
plot(price, main='price dynamics', ylab='$/share')
## plot the 1-day PnL assuming long 1 unit share
plot(-diff(price), main='1-day Loss (-PnL for longing 1 share)',
ylab='$/share')
windowsize = 125
alpha = 0.01
k = 1
#####################
### plot the VaR  ###
#####################
VaR1 = VaR_unit(price, windowsize, k, alpha, 'Normal')
VaR2 = VaR_unit(price, windowsize, k, alpha, 'Lognormal')
VaR3 = VaR_unit(price, windowsize, k, alpha, 'T')
library(quantmod)
library(xts)
library(timeDate)
library(MASS)
## specify the path for the Data
dir_RM_db = "W:/Data/RM"
dir_code = "W:/Rcode/Utils"
## specify the output directory for figures
dir_figures = paste(dir_RM_db, "figures", sep="/")
## set the working directory and load dependent scripts
setwd(dir_code)
source('VaR_unit_boot.R')
source('VaR_unit.R')
source('ES_unit.R')
#source('ES_unit_boot.R')
## set the working directory
setwd(dir_RM_db)
## get the name of the file
filename = dir()
## load the GTAT data
load("GTAT.RData")
price = GTAT[,'GTAT.Close']
plot(price, main='price dynamics', ylab='$/share')
## plot the 1-day PnL assuming long 1 unit share
plot(-diff(price), main='1-day Loss (-PnL for longing 1 share)',
ylab='$/share')
windowsize = 125
alpha = 0.01
k = 1
S = 500
VaR1 = VaR_unit(price, windowsize, k, alpha, 'Normal')
ES1 = ES_unit(price, windowsize, k, alpha, 'Normal')
ret = dailyReturn(price)[-1]
N = length(ret)
e=N
temp_ret = ret[(e-windowsize+1):e]
n=length(temp_ret)
# fit the returns by the normal model
mean_ret = mean(temp_ret)
sd_ret = sd(as.vector(temp_ret))
# Simulate S replicates of returns series and
# compute the standard MC estimator for ES
ES_long = rep(NA, S)
for (s in 1:S){
R.sim=qnorm(runif(n),mean=mean_ret,sd=sd_ret)
indi_long = R.sim <= quantile(R.sim, alpha)
if (sum(indi_long)>0){
ES_long[s] = price[e+1] *
(-sum(indi_long*R.sim)/sum(indi_long))
}else{ES_long[s]=0}
}
hist(ES_long, main='Histogram of Simulated ES by Standard MC')
abline(v=mean(ES_long), col='red', lwd=2)
abline(v=quantile(ES_long, 0.025), col='red', lty=2, lwd=2)
abline(v=quantile(ES_long, 0.975), col='red', lty=2, lwd=2)
abline(v=tail(ES1[,'ES_long'],1), col='blue', lty=1, lwd=2)
legend('topright', pch = c('-','-'),
col = c('red','blue'),
c('MC','Formula'), bty='n')
### Importance Sampling by G=NORM(mean=mean_ret+qnorm(alpha)*sd_ret, sd=sd_ret)
### Remark: the distribution G used in this IS procedure is the same as F except
###         the mean return is shifted by qnorm(alpha) times return's S.D.
mean_ret_shift = mean_ret + qnorm(alpha)*sd_ret
hist(rnorm(1000, mean=mean_ret, sd=sd_ret), col='grey', freq=F,
xlim=c(mean_ret-10*sd_ret, mean_ret+6*sd_ret), xlab='Ri',
main='compare F and G')
hist(rnorm(1000, mean=mean_ret_shift, sd=sd_ret), add=T, freq=F)
abline(v=mean_ret_shift, col='blue', lty=1, lwd=2)
ES_long_IS = rep(NA, S)
VaR_long_IS = rep(NA, S)
for (s in 1:S){
R.sim=qnorm(runif(n),mean=mean_ret_shift,sd=sd_ret)
R.sim.sort = sort(R.sim)
omega.sim = dnorm(R.sim.sort,mean=mean_ret,sd=sd_ret)/
dnorm(R.sim.sort,mean=mean_ret_shift,sd=sd_ret)/n  ## compute the likelihood ratios divided by sample size n
if (sum(omega.sim)>=alpha){
k.sim = min(index(R.sim)[(cumsum(omega.sim)-alpha)>=0]) ## get minimum index k such that k=inf{m: omega.sim[1]+...+omega.sim[m]>=alpha}
}else{k.sim = n}
cutoff = R.sim.sort[k.sim]
indi_long = R.sim.sort < cutoff
ES_long_IS[s]= - price[e+1]*
( sum(omega.sim*R.sim.sort*indi_long)+
(alpha-sum(omega.sim*indi_long))*cutoff ) / alpha
VaR_long_IS[s]=-price[e+1]*cutoff
}
hist(ES_long_IS, main='Histogram of Simulated ES by Importance Sampling')
abline(v=mean(ES_long_IS), col='red', lwd=2)
abline(v=quantile(ES_long_IS, 0.025), col='red', lty=2, lwd=2)
abline(v=quantile(ES_long_IS, 0.975), col='red', lty=2, lwd=2)
abline(v=tail(ES1[,'ES_long'],1), col='blue', lty=1, lwd=2)
legend('topright', pch = c('-','-'),
col = c('red','blue'),
c('IS','Formula'), bty='n')
## data source: http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html
## specify the path for the Fama-French database
dir_FF_db = "W:/Data/F-F"
## specify the output directory for figures
dir_figures = paste(dir_FF_db, "figures", sep="/")
## go to the folder of daily data
setwd(paste(dir_FF_db, "F-F_Research_Data_Factors_daily", sep="/"))
## get the name of the file
filename = dir()
## read the file and write it into a table
data_daily = read.csv(filename, skip=4, sep="", stringsAsFactors=F)
## specify the directory of source code
dir_code = "W:/Rcode/Utils"
source(paste(dir_code, "Fama_French_research_daily.R", sep="/"))
#################### Download Sector ETFs #######################
library(quantmod)  # build library for package 'quantmod', which has been installed
op <- options(warn = (-1)) # suppress warnings
# use function 'getSymbols' in quantmod and the tick name to download price info
XLB = get(getSymbols('XLB', from = "2007-01-03", to="2014-07-31", src = 'yahoo', adjust=TRUE))
XLE = get(getSymbols('XLE', from = "2007-01-03", to="2014-07-31", src = 'yahoo', adjust=TRUE))
XLF = get(getSymbols('XLF', from = "2007-01-03", to="2014-07-31", src = 'yahoo', adjust=TRUE))
XLI = get(getSymbols('XLI', from = "2007-01-03", to="2014-07-31", src = 'yahoo', adjust=TRUE))
XLK = get(getSymbols('XLK', from = "2007-01-03", to="2014-07-31", src = 'yahoo', adjust=TRUE))
XLP = get(getSymbols('XLP', from = "2007-01-03", to="2014-07-31", src = 'yahoo', adjust=TRUE))
XLU = get(getSymbols('XLU', from = "2007-01-03", to="2014-07-31", src = 'yahoo', adjust=TRUE))
XLV = get(getSymbols('XLV', from = "2007-01-03", to="2014-07-31", src = 'yahoo', adjust=TRUE))
XLY = get(getSymbols('XLY', from = "2007-01-03", to="2014-07-31", src = 'yahoo', adjust=TRUE))
SPY = get(getSymbols('SPY', from = "2007-01-03", to="2014-07-31", src = 'yahoo', adjust=TRUE))
XLB_ret = dailyReturn(XLB)*252
XLE_ret = dailyReturn(XLE)*252
XLF_ret = dailyReturn(XLF)*252
XLI_ret = dailyReturn(XLI)*252
XLK_ret = dailyReturn(XLK)*252
XLP_ret = dailyReturn(XLP)*252
XLU_ret = dailyReturn(XLU)*252
XLV_ret = dailyReturn(XLV)*252
XLY_ret = dailyReturn(XLY)*252
SPY_ret = dailyReturn(SPY)*252
sectorETF = cbind(XLB_ret, XLE_ret, XLF_ret, XLI_ret, XLK_ret, XLP_ret,
XLU_ret, XLV_ret, XLY_ret)
names(sectorETF)=c("XLB","XLE","XLF","XLI","XLK","XLP","XLU","XLV","XLY")
sectornames = c("Basic Materials", "Energy", "Financial", "Industrial",
"Technology", "Consumer Staples", "Utilities", "Healthcare", "Consumer Discretionary")
#############################################################
### Fit the CAPM on a monthly basis 					            ###
###                    Sept 16, 2014, by Junyi Zhang    	###
#############################################################
timestamp = index(XLF_ret)
month = substr(timestamp, start=1, stop=7)
month.unique = unique(month)
nperiod = length(month.unique)
nETF = dim(sectorETF)[2]
newdata = cbind(data_daily_s, sectorETF)
beta.M = matrix(NA, nrow=nperiod, ncol=nETF)
r.squared = matrix(NA, nrow=nperiod, ncol=nETF)
colnames(beta.M) = colnames(r.squared) = names(sectorETF)
for (i in 1:nperiod){
select = grep(month.unique[i],month)
model03 = lm(newdata[select,names(sectorETF)]~newdata[select,c("Mkt.RF.daily")])
beta.M[i,] = model03$coefficients[2,]
for (j in 1:nETF)
r.squared[i,j] = summary(model03)[[j]]$r.squared
}
beta.M = xts(beta.M, order.by=as.yearmon(month.unique))
r.squared = xts(r.squared, order.by=as.yearmon(month.unique))
dir_temp = getwd(); setwd(dir_figures);
pdf("sector_CAPM_beta_M.pdf", width=12, height=9)
par(mfrow=c(3,3))
for (j in 1:nETF) plot(beta.M[,j], main=sectornames[j])
dev.off()
pdf("sector_CAPM_R_squared.pdf", width=12, height=9)
par(mfrow=c(3,3))
for (j in 1:nETF) plot(r.squared[,j], main=sectornames[j])
dev.off()
setwd(dir_temp)
